function split256(x:u256) -> (x1:u64, x2:u64, x3:u64, x4:u64)
{
	// TODO: implement conversion
	// NOTE: this may become a native function of the eWASM backend
}

function combine256(x1:u64, x2:u64, x3:u64, x4:u64) -> (x:u256)
{
	// TODO: implement conversion
	// NOTE: this may become a native function of the eWASM backend
}

// NOTE: add64(x:u64, y:u64) -> (x:u64) is a native
//       function provided by the eWASM backend

function add256(x:u256, y:u256) -> (z:u256)
{
	let x1:u64, x2:u64, x3:u64, x4:u64 := split256(x)
	let y1:u64, y2:u64, y3:u64, y4:u64 := split256(y)

	// use add64 here

	// just return x for now
	z := combine256(x1, x2, x3, x4)
}
